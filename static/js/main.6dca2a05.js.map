{"version":3,"file":"static/js/main.6dca2a05.js","mappings":"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","sources":["pages/Todo/index.tsx","pages/Form/index.tsx","pages/TodoList/index.tsx","App.tsx"],"sourcesContent":["import { ChangeEvent, FC, memo, useCallback, useState } from 'react';\nimport { AiOutlineClose, AiOutlineCheck } from 'react-icons/ai';\nimport { TodoItem } from '../../model/todo';\n\ninterface Props {\n  todo: TodoItem;\n  handleDelTodo: (todo: TodoItem) => void;\n  completeTodo: (todo: TodoItem) => void;\n  EditTodo: (todo: TodoItem, text: string) => void;\n}\nconst Todo: FC<Props> = memo(props => {\n  const { todo, handleDelTodo, completeTodo, EditTodo } = props;\n  const [text, setText] = useState(todo.content);\n  const [editing, setEditing] = useState(false);\n\n  const handleTextChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setText(event.target.value);\n    },\n    [],\n  );\n  const handleEditingChange = useCallback(() => {\n    setEditing(true);\n  }, []);\n  const handleBlur = (todo: TodoItem) => {\n    EditTodo(todo, text);\n    setEditing(false);\n  };\n  if (editing) {\n    return (\n      <li key={todo.id}>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          value={text}\n          onChange={handleTextChange}\n          onBlur={() => {\n            handleBlur(todo);\n          }}\n        />\n      </li>\n    );\n  } else {\n    return (\n      <li key={todo.id}>\n        <div className={todo.state ? 'front completed' : 'front'}>\n          <button\n            className=\"complete\"\n            onClick={() => {\n              completeTodo(todo);\n            }}\n          >\n            {todo.state ? <AiOutlineCheck /> : ''}\n          </button>\n          <label className=\"content\" onDoubleClick={handleEditingChange}>\n            {todo.content}\n          </label>\n          <div className=\"del\">\n            <button onClick={() => handleDelTodo(todo)}>\n              <AiOutlineClose />\n            </button>\n          </div>\n        </div>\n      </li>\n    );\n  }\n});\nexport default Todo;\n","import { FC, memo } from 'react';\nimport { AiOutlineCheck } from 'react-icons/ai';\nimport Todo from '../Todo';\nimport { TodoItem } from '../../model/todo';\n\ninterface Props {\n  todos: Array<TodoItem>;\n  handleDelTodo: (todo: TodoItem) => void;\n  completeAllTodo: () => void;\n  completeTodo: (todo: TodoItem) => void;\n  EditTodo: (todo: TodoItem, text: string) => void;\n}\nconst Form: FC<Props> = memo(props => {\n  const { todos, handleDelTodo, completeAllTodo, completeTodo, EditTodo } =\n    props;\n  return (\n    <div className=\"todos-form\">\n      <button className=\"complete-all\" onClick={completeAllTodo}>\n        <AiOutlineCheck />\n      </button>\n      <ul>\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            handleDelTodo={handleDelTodo}\n            completeTodo={completeTodo}\n            EditTodo={EditTodo}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n});\nexport default Form;\n","import {\n  KeyboardEvent,\n  ChangeEvent,\n  FC,\n  useEffect,\n  useState,\n  useCallback,\n  memo,\n} from 'react';\nimport Form from '../Form';\nimport { TodoItem } from '@/model/todo';\n\ninterface Props {\n  listState: string;\n}\nconst TodoList: FC<Props> = memo(props => {\n  const { listState } = props;\n  const [newTodo, setNewTodo] = useState('');\n  const [todos, setTodos] = useState([\n    { id: '1', content: '吃饭', state: false },\n    { id: '2', content: '睡觉', state: true },\n  ]);\n\n  const handleNewTodoChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setNewTodo(event.target.value);\n    },\n    [],\n  );\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.code !== 'Enter') {\n      return;\n    }\n    event.preventDefault();\n    const tmp = newTodo;\n    if (tmp) {\n      setTodos([\n        ...todos,\n        { id: Math.random().toString(16), content: tmp, state: false },\n      ]);\n      setNewTodo('');\n    }\n  };\n\n  const handleDelTodo = (todo: TodoItem) => {\n    const tmp = todos.filter(val => {\n      return val !== todo;\n    });\n    setTodos(tmp);\n  };\n\n  const completeAllTodo = () => {\n    const state =\n      todos.filter(todo => {\n        return todo.state === false;\n      }).length > 0;\n    const tmp = todos.map(todo => {\n      return {\n        ...todo,\n        state,\n      };\n    });\n    setTodos(tmp);\n  };\n\n  const completeTodo = (todo: TodoItem) => {\n    setTodos(\n      todos.map(tmp => {\n        return tmp === todo ? { ...todo, state: !tmp.state } : tmp;\n      }),\n    );\n  };\n\n  const EditTodo = (todo: TodoItem, text: string) => {\n    setTodos(\n      todos.map(tmp => {\n        return tmp === todo ? { ...todo, content: text } : tmp;\n      }),\n    );\n  };\n\n  useEffect(() => {\n    const list = JSON.parse(localStorage.todos ? localStorage.todos : []);\n    setTodos(list);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n  let list = todos;\n  if (listState === 'Active') {\n    list = todos.filter(todo => {\n      return todo.state === false;\n    });\n  } else if (listState === 'Completed') {\n    list = todos.filter(todo => {\n      return todo.state === true;\n    });\n  }\n  return (\n    <div className={todos.length > 0 ? 'todos-box' : 'none-todo todos-box'}>\n      <header className=\"new-todo\">\n        <h1>todos</h1>\n        <input\n          type=\"text\"\n          onChange={handleNewTodoChange}\n          value={newTodo}\n          onKeyDown={handleKeyDown}\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n      <Form\n        EditTodo={EditTodo}\n        todos={list}\n        handleDelTodo={handleDelTodo}\n        completeAllTodo={completeAllTodo}\n        completeTodo={completeTodo}\n      />\n      <footer className=\"todos-footer\">\n        <span>\n          {`${\n            todos.filter(todo => {\n              return todo.state === false;\n            }).length\n          } `}\n          Items left\n        </span>\n        <ul>\n          <li>\n            <a href=\"/\">All</a>\n          </li>\n          <li>\n            <a href=\"/Active\">Active</a>\n          </li>\n          <li>\n            <a href=\"/Completed\">Completed</a>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n});\n\nexport default TodoList;\n","import { Switch, Route } from '@modern-js/runtime/router';\nimport { memo } from 'react';\nimport TodoList from './pages/TodoList';\nimport './App.css';\n\nconst App = memo(() => (\n  <Switch>\n    <Route exact={true} path=\"/\">\n      <TodoList listState=\"All\" />\n    </Route>\n    <Route exact={true} path=\"/Active\">\n      <TodoList listState=\"Active\" />\n    </Route>\n    <Route exact={true} path=\"/Completed\">\n      <TodoList listState=\"Completed\" />\n    </Route>\n  </Switch>\n));\n\nexport default App;\n"],"names":["memo","props","todo","handleDelTodo","completeTodo","EditTodo","useState","content","text","setText","editing","setEditing","handleTextChange","useCallback","event","target","value","handleEditingChange","type","className","autoFocus","onChange","onBlur","handleBlur","id","state","onClick","onDoubleClick","todos","completeAllTodo","map","listState","newTodo","setNewTodo","setTodos","handleNewTodoChange","useEffect","list","JSON","parse","localStorage","setItem","stringify","filter","length","onKeyDown","code","preventDefault","tmp","Math","random","toString","placeholder","val","href","exact","path"],"sourceRoot":""}